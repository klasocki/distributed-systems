# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.3
#
# <auto-generated>
#
# Generated from file `house.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module House
_M_House = Ice.openModule('House')
__name__ = 'House'

if '_t_seqOfReadings' not in _M_House.__dict__:
    _M_House._t_seqOfReadings = IcePy.defineSequence('::House::seqOfReadings', (), IcePy._t_float)

if 'TemperatureOutOfRangeError' not in _M_House.__dict__:
    _M_House.TemperatureOutOfRangeError = Ice.createTempClass()
    class TemperatureOutOfRangeError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::House::TemperatureOutOfRangeError'

    _M_House._t_TemperatureOutOfRangeError = IcePy.defineException('::House::TemperatureOutOfRangeError', TemperatureOutOfRangeError, (), False, None, ())
    TemperatureOutOfRangeError._ice_type = _M_House._t_TemperatureOutOfRangeError

    _M_House.TemperatureOutOfRangeError = TemperatureOutOfRangeError
    del TemperatureOutOfRangeError

_M_House._t_CentralHeating = IcePy.defineValue('::House::CentralHeating', Ice.Value, -1, (), False, True, None, ())

if 'CentralHeatingPrx' not in _M_House.__dict__:
    _M_House.CentralHeatingPrx = Ice.createTempClass()
    class CentralHeatingPrx(Ice.ObjectPrx):

        def getCurrentTemperature(self, context=None):
            return _M_House.CentralHeating._op_getCurrentTemperature.invoke(self, ((), context))

        def getCurrentTemperatureAsync(self, context=None):
            return _M_House.CentralHeating._op_getCurrentTemperature.invokeAsync(self, ((), context))

        def begin_getCurrentTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.CentralHeating._op_getCurrentTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentTemperature(self, _r):
            return _M_House.CentralHeating._op_getCurrentTemperature.end(self, _r)

        def getDailyTemperatures(self, context=None):
            return _M_House.CentralHeating._op_getDailyTemperatures.invoke(self, ((), context))

        def getDailyTemperaturesAsync(self, context=None):
            return _M_House.CentralHeating._op_getDailyTemperatures.invokeAsync(self, ((), context))

        def begin_getDailyTemperatures(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.CentralHeating._op_getDailyTemperatures.begin(self, ((), _response, _ex, _sent, context))

        def end_getDailyTemperatures(self, _r):
            return _M_House.CentralHeating._op_getDailyTemperatures.end(self, _r)

        def changeHeatingTargetTemp(self, delta, context=None):
            return _M_House.CentralHeating._op_changeHeatingTargetTemp.invoke(self, ((delta, ), context))

        def changeHeatingTargetTempAsync(self, delta, context=None):
            return _M_House.CentralHeating._op_changeHeatingTargetTemp.invokeAsync(self, ((delta, ), context))

        def begin_changeHeatingTargetTemp(self, delta, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.CentralHeating._op_changeHeatingTargetTemp.begin(self, ((delta, ), _response, _ex, _sent, context))

        def end_changeHeatingTargetTemp(self, _r):
            return _M_House.CentralHeating._op_changeHeatingTargetTemp.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.CentralHeatingPrx.ice_checkedCast(proxy, '::House::CentralHeating', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.CentralHeatingPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::CentralHeating'
    _M_House._t_CentralHeatingPrx = IcePy.defineProxy('::House::CentralHeating', CentralHeatingPrx)

    _M_House.CentralHeatingPrx = CentralHeatingPrx
    del CentralHeatingPrx

    _M_House.CentralHeating = Ice.createTempClass()
    class CentralHeating(Ice.Object):

        def ice_ids(self, current=None):
            return ('::House::CentralHeating', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::CentralHeating'

        @staticmethod
        def ice_staticId():
            return '::House::CentralHeating'

        def getCurrentTemperature(self, current=None):
            raise NotImplementedError("servant method 'getCurrentTemperature' not implemented")

        def getDailyTemperatures(self, current=None):
            raise NotImplementedError("servant method 'getDailyTemperatures' not implemented")

        def changeHeatingTargetTemp(self, delta, current=None):
            raise NotImplementedError("servant method 'changeHeatingTargetTemp' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_CentralHeatingDisp)

        __repr__ = __str__

    _M_House._t_CentralHeatingDisp = IcePy.defineClass('::House::CentralHeating', CentralHeating, (), None, ())
    CentralHeating._ice_type = _M_House._t_CentralHeatingDisp

    CentralHeating._op_getCurrentTemperature = IcePy.Operation('getCurrentTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    CentralHeating._op_getDailyTemperatures = IcePy.Operation('getDailyTemperatures', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_House._t_seqOfReadings, False, 0), ())
    CentralHeating._op_changeHeatingTargetTemp = IcePy.Operation('changeHeatingTargetTemp', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), IcePy._t_float, False, 0), (_M_House._t_TemperatureOutOfRangeError,))

    _M_House.CentralHeating = CentralHeating
    del CentralHeating

if 'MachineEmptyError' not in _M_House.__dict__:
    _M_House.MachineEmptyError = Ice.createTempClass()
    class MachineEmptyError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::House::MachineEmptyError'

    _M_House._t_MachineEmptyError = IcePy.defineException('::House::MachineEmptyError', MachineEmptyError, (), False, None, ())
    MachineEmptyError._ice_type = _M_House._t_MachineEmptyError

    _M_House.MachineEmptyError = MachineEmptyError
    del MachineEmptyError

if 'TeaType' not in _M_House.__dict__:
    _M_House.TeaType = Ice.createTempClass()
    class TeaType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    TeaType.GREEN = TeaType("GREEN", 0)
    TeaType.BLACK = TeaType("BLACK", 1)
    TeaType.WHITE = TeaType("WHITE", 2)
    TeaType.HERBAL = TeaType("HERBAL", 3)
    TeaType._enumerators = { 0:TeaType.GREEN, 1:TeaType.BLACK, 2:TeaType.WHITE, 3:TeaType.HERBAL }

    _M_House._t_TeaType = IcePy.defineEnum('::House::TeaType', TeaType, (), TeaType._enumerators)

    _M_House.TeaType = TeaType
    del TeaType

if 'CoffeeType' not in _M_House.__dict__:
    _M_House.CoffeeType = Ice.createTempClass()
    class CoffeeType(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CoffeeType.LATTE = CoffeeType("LATTE", 0)
    CoffeeType.ESSPRESSO = CoffeeType("ESSPRESSO", 1)
    CoffeeType.MOCCA = CoffeeType("MOCCA", 2)
    CoffeeType._enumerators = { 0:CoffeeType.LATTE, 1:CoffeeType.ESSPRESSO, 2:CoffeeType.MOCCA }

    _M_House._t_CoffeeType = IcePy.defineEnum('::House::CoffeeType', CoffeeType, (), CoffeeType._enumerators)

    _M_House.CoffeeType = CoffeeType
    del CoffeeType

_M_House._t_Drink = IcePy.defineValue('::House::Drink', Ice.Value, -1, (), False, True, None, ())

if 'DrinkPrx' not in _M_House.__dict__:
    _M_House.DrinkPrx = Ice.createTempClass()
    class DrinkPrx(Ice.ObjectPrx):

        def getTemperature(self, context=None):
            return _M_House.Drink._op_getTemperature.invoke(self, ((), context))

        def getTemperatureAsync(self, context=None):
            return _M_House.Drink._op_getTemperature.invokeAsync(self, ((), context))

        def begin_getTemperature(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.Drink._op_getTemperature.begin(self, ((), _response, _ex, _sent, context))

        def end_getTemperature(self, _r):
            return _M_House.Drink._op_getTemperature.end(self, _r)

        def drinkIt(self, context=None):
            return _M_House.Drink._op_drinkIt.invoke(self, ((), context))

        def drinkItAsync(self, context=None):
            return _M_House.Drink._op_drinkIt.invokeAsync(self, ((), context))

        def begin_drinkIt(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.Drink._op_drinkIt.begin(self, ((), _response, _ex, _sent, context))

        def end_drinkIt(self, _r):
            return _M_House.Drink._op_drinkIt.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.DrinkPrx.ice_checkedCast(proxy, '::House::Drink', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.DrinkPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::Drink'
    _M_House._t_DrinkPrx = IcePy.defineProxy('::House::Drink', DrinkPrx)

    _M_House.DrinkPrx = DrinkPrx
    del DrinkPrx

    _M_House.Drink = Ice.createTempClass()
    class Drink(Ice.Object):

        def ice_ids(self, current=None):
            return ('::House::Drink', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::Drink'

        @staticmethod
        def ice_staticId():
            return '::House::Drink'

        def getTemperature(self, current=None):
            raise NotImplementedError("servant method 'getTemperature' not implemented")

        def drinkIt(self, current=None):
            raise NotImplementedError("servant method 'drinkIt' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_DrinkDisp)

        __repr__ = __str__

    _M_House._t_DrinkDisp = IcePy.defineClass('::House::Drink', Drink, (), None, ())
    Drink._ice_type = _M_House._t_DrinkDisp

    Drink._op_getTemperature = IcePy.Operation('getTemperature', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_float, False, 0), ())
    Drink._op_drinkIt = IcePy.Operation('drinkIt', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_House.Drink = Drink
    del Drink

_M_House._t_Tea = IcePy.defineValue('::House::Tea', Ice.Value, -1, (), False, True, None, ())

if 'TeaPrx' not in _M_House.__dict__:
    _M_House.TeaPrx = Ice.createTempClass()
    class TeaPrx(_M_House.DrinkPrx):

        def addSugar(self, context=None):
            return _M_House.Tea._op_addSugar.invoke(self, ((), context))

        def addSugarAsync(self, context=None):
            return _M_House.Tea._op_addSugar.invokeAsync(self, ((), context))

        def begin_addSugar(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.Tea._op_addSugar.begin(self, ((), _response, _ex, _sent, context))

        def end_addSugar(self, _r):
            return _M_House.Tea._op_addSugar.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.TeaPrx.ice_checkedCast(proxy, '::House::Tea', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.TeaPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::Tea'
    _M_House._t_TeaPrx = IcePy.defineProxy('::House::Tea', TeaPrx)

    _M_House.TeaPrx = TeaPrx
    del TeaPrx

    _M_House.Tea = Ice.createTempClass()
    class Tea(_M_House.Drink):

        def ice_ids(self, current=None):
            return ('::House::Drink', '::House::Tea', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::Tea'

        @staticmethod
        def ice_staticId():
            return '::House::Tea'

        def addSugar(self, current=None):
            raise NotImplementedError("servant method 'addSugar' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_TeaDisp)

        __repr__ = __str__

    _M_House._t_TeaDisp = IcePy.defineClass('::House::Tea', Tea, (), None, (_M_House._t_DrinkDisp,))
    Tea._ice_type = _M_House._t_TeaDisp

    Tea._op_addSugar = IcePy.Operation('addSugar', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_House.Tea = Tea
    del Tea

_M_House._t_Coffee = IcePy.defineValue('::House::Coffee', Ice.Value, -1, (), False, True, None, ())

if 'CoffeePrx' not in _M_House.__dict__:
    _M_House.CoffeePrx = Ice.createTempClass()
    class CoffeePrx(_M_House.DrinkPrx):

        def addMilk(self, context=None):
            return _M_House.Coffee._op_addMilk.invoke(self, ((), context))

        def addMilkAsync(self, context=None):
            return _M_House.Coffee._op_addMilk.invokeAsync(self, ((), context))

        def begin_addMilk(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.Coffee._op_addMilk.begin(self, ((), _response, _ex, _sent, context))

        def end_addMilk(self, _r):
            return _M_House.Coffee._op_addMilk.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.CoffeePrx.ice_checkedCast(proxy, '::House::Coffee', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.CoffeePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::Coffee'
    _M_House._t_CoffeePrx = IcePy.defineProxy('::House::Coffee', CoffeePrx)

    _M_House.CoffeePrx = CoffeePrx
    del CoffeePrx

    _M_House.Coffee = Ice.createTempClass()
    class Coffee(_M_House.Drink):

        def ice_ids(self, current=None):
            return ('::House::Coffee', '::House::Drink', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::Coffee'

        @staticmethod
        def ice_staticId():
            return '::House::Coffee'

        def addMilk(self, current=None):
            raise NotImplementedError("servant method 'addMilk' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_CoffeeDisp)

        __repr__ = __str__

    _M_House._t_CoffeeDisp = IcePy.defineClass('::House::Coffee', Coffee, (), None, (_M_House._t_DrinkDisp,))
    Coffee._ice_type = _M_House._t_CoffeeDisp

    Coffee._op_addMilk = IcePy.Operation('addMilk', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_House.Coffee = Coffee
    del Coffee

_M_House._t_DrinkMachine = IcePy.defineValue('::House::DrinkMachine', Ice.Value, -1, (), False, True, None, ())

if 'DrinkMachinePrx' not in _M_House.__dict__:
    _M_House.DrinkMachinePrx = Ice.createTempClass()
    class DrinkMachinePrx(Ice.ObjectPrx):

        def getCapacity(self, context=None):
            return _M_House.DrinkMachine._op_getCapacity.invoke(self, ((), context))

        def getCapacityAsync(self, context=None):
            return _M_House.DrinkMachine._op_getCapacity.invokeAsync(self, ((), context))

        def begin_getCapacity(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.DrinkMachine._op_getCapacity.begin(self, ((), _response, _ex, _sent, context))

        def end_getCapacity(self, _r):
            return _M_House.DrinkMachine._op_getCapacity.end(self, _r)

        def getCurrentAmount(self, context=None):
            return _M_House.DrinkMachine._op_getCurrentAmount.invoke(self, ((), context))

        def getCurrentAmountAsync(self, context=None):
            return _M_House.DrinkMachine._op_getCurrentAmount.invokeAsync(self, ((), context))

        def begin_getCurrentAmount(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.DrinkMachine._op_getCurrentAmount.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentAmount(self, _r):
            return _M_House.DrinkMachine._op_getCurrentAmount.end(self, _r)

        def refill(self, context=None):
            return _M_House.DrinkMachine._op_refill.invoke(self, ((), context))

        def refillAsync(self, context=None):
            return _M_House.DrinkMachine._op_refill.invokeAsync(self, ((), context))

        def begin_refill(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.DrinkMachine._op_refill.begin(self, ((), _response, _ex, _sent, context))

        def end_refill(self, _r):
            return _M_House.DrinkMachine._op_refill.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.DrinkMachinePrx.ice_checkedCast(proxy, '::House::DrinkMachine', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.DrinkMachinePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::DrinkMachine'
    _M_House._t_DrinkMachinePrx = IcePy.defineProxy('::House::DrinkMachine', DrinkMachinePrx)

    _M_House.DrinkMachinePrx = DrinkMachinePrx
    del DrinkMachinePrx

    _M_House.DrinkMachine = Ice.createTempClass()
    class DrinkMachine(Ice.Object):

        def ice_ids(self, current=None):
            return ('::House::DrinkMachine', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::DrinkMachine'

        @staticmethod
        def ice_staticId():
            return '::House::DrinkMachine'

        def getCapacity(self, current=None):
            raise NotImplementedError("servant method 'getCapacity' not implemented")

        def getCurrentAmount(self, current=None):
            raise NotImplementedError("servant method 'getCurrentAmount' not implemented")

        def refill(self, current=None):
            raise NotImplementedError("servant method 'refill' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_DrinkMachineDisp)

        __repr__ = __str__

    _M_House._t_DrinkMachineDisp = IcePy.defineClass('::House::DrinkMachine', DrinkMachine, (), None, ())
    DrinkMachine._ice_type = _M_House._t_DrinkMachineDisp

    DrinkMachine._op_getCapacity = IcePy.Operation('getCapacity', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    DrinkMachine._op_getCurrentAmount = IcePy.Operation('getCurrentAmount', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())
    DrinkMachine._op_refill = IcePy.Operation('refill', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_House.DrinkMachine = DrinkMachine
    del DrinkMachine

_M_House._t_CoffeeMachine = IcePy.defineValue('::House::CoffeeMachine', Ice.Value, -1, (), False, True, None, ())

if 'CoffeeMachinePrx' not in _M_House.__dict__:
    _M_House.CoffeeMachinePrx = Ice.createTempClass()
    class CoffeeMachinePrx(_M_House.DrinkMachinePrx):

        def getCoffee(self, coffeeType, context=None):
            return _M_House.CoffeeMachine._op_getCoffee.invoke(self, ((coffeeType, ), context))

        def getCoffeeAsync(self, coffeeType, context=None):
            return _M_House.CoffeeMachine._op_getCoffee.invokeAsync(self, ((coffeeType, ), context))

        def begin_getCoffee(self, coffeeType, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.CoffeeMachine._op_getCoffee.begin(self, ((coffeeType, ), _response, _ex, _sent, context))

        def end_getCoffee(self, _r):
            return _M_House.CoffeeMachine._op_getCoffee.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.CoffeeMachinePrx.ice_checkedCast(proxy, '::House::CoffeeMachine', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.CoffeeMachinePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::CoffeeMachine'
    _M_House._t_CoffeeMachinePrx = IcePy.defineProxy('::House::CoffeeMachine', CoffeeMachinePrx)

    _M_House.CoffeeMachinePrx = CoffeeMachinePrx
    del CoffeeMachinePrx

    _M_House.CoffeeMachine = Ice.createTempClass()
    class CoffeeMachine(_M_House.DrinkMachine):

        def ice_ids(self, current=None):
            return ('::House::CoffeeMachine', '::House::DrinkMachine', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::CoffeeMachine'

        @staticmethod
        def ice_staticId():
            return '::House::CoffeeMachine'

        def getCoffee(self, coffeeType, current=None):
            raise NotImplementedError("servant method 'getCoffee' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_CoffeeMachineDisp)

        __repr__ = __str__

    _M_House._t_CoffeeMachineDisp = IcePy.defineClass('::House::CoffeeMachine', CoffeeMachine, (), None, (_M_House._t_DrinkMachineDisp,))
    CoffeeMachine._ice_type = _M_House._t_CoffeeMachineDisp

    CoffeeMachine._op_getCoffee = IcePy.Operation('getCoffee', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_House._t_CoffeeType, False, 0),), (), ((), _M_House._t_CoffeePrx, False, 0), (_M_House._t_MachineEmptyError,))

    _M_House.CoffeeMachine = CoffeeMachine
    del CoffeeMachine

_M_House._t_TeaMachine = IcePy.defineValue('::House::TeaMachine', Ice.Value, -1, (), False, True, None, ())

if 'TeaMachinePrx' not in _M_House.__dict__:
    _M_House.TeaMachinePrx = Ice.createTempClass()
    class TeaMachinePrx(_M_House.DrinkMachinePrx):

        def getTea(self, teaType, context=None):
            return _M_House.TeaMachine._op_getTea.invoke(self, ((teaType, ), context))

        def getTeaAsync(self, teaType, context=None):
            return _M_House.TeaMachine._op_getTea.invokeAsync(self, ((teaType, ), context))

        def begin_getTea(self, teaType, _response=None, _ex=None, _sent=None, context=None):
            return _M_House.TeaMachine._op_getTea.begin(self, ((teaType, ), _response, _ex, _sent, context))

        def end_getTea(self, _r):
            return _M_House.TeaMachine._op_getTea.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_House.TeaMachinePrx.ice_checkedCast(proxy, '::House::TeaMachine', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_House.TeaMachinePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::House::TeaMachine'
    _M_House._t_TeaMachinePrx = IcePy.defineProxy('::House::TeaMachine', TeaMachinePrx)

    _M_House.TeaMachinePrx = TeaMachinePrx
    del TeaMachinePrx

    _M_House.TeaMachine = Ice.createTempClass()
    class TeaMachine(_M_House.DrinkMachine):

        def ice_ids(self, current=None):
            return ('::House::DrinkMachine', '::House::TeaMachine', '::Ice::Object')

        def ice_id(self, current=None):
            return '::House::TeaMachine'

        @staticmethod
        def ice_staticId():
            return '::House::TeaMachine'

        def getTea(self, teaType, current=None):
            raise NotImplementedError("servant method 'getTea' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_House._t_TeaMachineDisp)

        __repr__ = __str__

    _M_House._t_TeaMachineDisp = IcePy.defineClass('::House::TeaMachine', TeaMachine, (), None, (_M_House._t_DrinkMachineDisp,))
    TeaMachine._ice_type = _M_House._t_TeaMachineDisp

    TeaMachine._op_getTea = IcePy.Operation('getTea', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_House._t_TeaType, False, 0),), (), ((), _M_House._t_TeaPrx, False, 0), (_M_House._t_MachineEmptyError,))

    _M_House.TeaMachine = TeaMachine
    del TeaMachine

# End of module House
